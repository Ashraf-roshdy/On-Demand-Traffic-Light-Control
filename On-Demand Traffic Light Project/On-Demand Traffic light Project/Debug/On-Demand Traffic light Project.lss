
On-Demand Traffic light Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000794  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdc  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb1  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061f  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbc  00000000  00000000  0000349f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000405b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  74:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
 Returns     : No Return.
 */
 void app_init()
{
	//Set car's LEDs Pin Number/Port Number/Pin Direction.
	DIO_init(CAR_G_Pin,	CAR_PORT, OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	61 e4       	ldi	r22, 0x41	; 65
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
	DIO_init(CAR_Y_Pin,	CAR_PORT, OUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	61 e4       	ldi	r22, 0x41	; 65
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
	DIO_init(CAR_R_Pin,	CAR_PORT, OUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	61 e4       	ldi	r22, 0x41	; 65
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
		
	//Set Pedestrian's LEDs Pin Number/Port Number/Pin Direction.
	DIO_init(PED_G_Pin, PED_PORT, OUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
	DIO_init(PED_Y_Pin,	PED_PORT, OUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	62 e4       	ldi	r22, 0x42	; 66
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
	DIO_init(PED_R_Pin,	PED_PORT, OUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e4       	ldi	r22, 0x42	; 66
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
		
	//Set Pedestrian's Button Pin Number/Port Number.	
	BUTTON_init(PED_BTN_Pin, BTN_PORT);
  b8:	64 e4       	ldi	r22, 0x44	; 68
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <BUTTON_init>
		
	//Enable Global Interrupts.		
	sei();
  c0:	78 94       	sei
		
	//Enable Timer 0 Overflow Interrupt.
	TIMSK |= (1<<TOIE0);
  c2:	89 b7       	in	r24, 0x39	; 57
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	89 bf       	out	0x39, r24	; 57
	
	//Set INT0 to Sense on Falling edge.
	MCUCR &=~ (1<<ISC00);  //ISC00 = 0
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC01);   //ISC01 = 1
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	85 bf       	out	0x35, r24	; 53
		
	// Enable External Interrupt-INT0.
	GICR |= (1<<INT0);
  d4:	8b b7       	in	r24, 0x3b	; 59
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	8b bf       	out	0x3b, r24	; 59
		
	//Initialize Timer0 in Normal Mode and set the initial value.
	Timer0_init	(Normal,Timer0_InitialValue);
  da:	6c e0       	ldi	r22, 0x0C	; 12
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 20 03 	call	0x640	; 0x640 <Timer0_init>
	
	// Start Timer With Pre_scaler 1024.
	Timer0_start(prescaler_1024);
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	0e 94 48 03 	call	0x690	; 0x690 <Timer0_start>
  ea:	08 95       	ret

000000ec <app_start>:
 */
 void app_start()
{	
	while(1)
	{
		switch(CAR_Mode)
  ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CAR_Mode>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	61 f1       	breq	.+88     	; 0x14c <app_start+0x60>
  f4:	28 f4       	brcc	.+10     	; 0x100 <app_start+0x14>
  f6:	88 23       	and	r24, r24
  f8:	49 f0       	breq	.+18     	; 0x10c <app_start+0x20>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	a1 f0       	breq	.+40     	; 0x126 <app_start+0x3a>
  fe:	48 c0       	rjmp	.+144    	; 0x190 <app_start+0xa4>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	89 f1       	breq	.+98     	; 0x166 <app_start+0x7a>
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	09 f4       	brne	.+2      	; 0x10a <app_start+0x1e>
 108:	41 c0       	rjmp	.+130    	; 0x18c <app_start+0xa0>
 10a:	42 c0       	rjmp	.+132    	; 0x190 <app_start+0xa4>
			{//Car Mode Sequence Green -> Yellow_Red -> Red -> Yellow-Green and Repeat. 
				case CAR_GREEN:
					LED_ON (CAR_G_Pin,CAR_PORT);		//Turn On Car GREEN lED.
 10c:	61 e4       	ldi	r22, 0x41	; 65
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 82 01 	call	0x304	; 0x304 <LED_ON>
					LED_OFF(CAR_Y_Pin, CAR_PORT);
 114:	61 e4       	ldi	r22, 0x41	; 65
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_OFF(CAR_R_Pin, CAR_PORT);
 11c:	61 e4       	ldi	r22, 0x41	; 65
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					break;	
 124:	35 c0       	rjmp	.+106    	; 0x190 <app_start+0xa4>
					
				case CAR_YELLOW_RED:
					LED_OFF(CAR_G_Pin,CAR_PORT);
 126:	61 e4       	ldi	r22, 0x41	; 65
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					if (Timer0_OverFlow_Car_Toggle > Timer0_NumberofOverFlows_toggle)
 12e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Timer0_OverFlow_Car_Toggle>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	30 f0       	brcs	.+12     	; 0x142 <app_start+0x56>
					{
						LED_toggle(CAR_Y_Pin,CAR_PORT);	//Toggle Car Yellow lED.
 136:	61 e4       	ldi	r22, 0x41	; 65
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8a 01 	call	0x314	; 0x314 <LED_toggle>
						Timer0_OverFlow_Car_Toggle =0 ;
 13e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Timer0_OverFlow_Car_Toggle>
					}
					LED_OFF(CAR_R_Pin, CAR_PORT);
 142:	61 e4       	ldi	r22, 0x41	; 65
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					break;
 14a:	22 c0       	rjmp	.+68     	; 0x190 <app_start+0xa4>
					
				case CAR_RED:
					LED_OFF(CAR_G_Pin,CAR_PORT);
 14c:	61 e4       	ldi	r22, 0x41	; 65
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_OFF(CAR_Y_Pin, CAR_PORT);
 154:	61 e4       	ldi	r22, 0x41	; 65
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_ON (CAR_R_Pin, CAR_PORT);		//Turn On Car RED lED.
 15c:	61 e4       	ldi	r22, 0x41	; 65
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 82 01 	call	0x304	; 0x304 <LED_ON>
					break;
 164:	15 c0       	rjmp	.+42     	; 0x190 <app_start+0xa4>
			
				case CAR_YELLOW_Green:
					LED_OFF(CAR_G_Pin,CAR_PORT);
 166:	61 e4       	ldi	r22, 0x41	; 65
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					if (Timer0_OverFlow_Car_Toggle > Timer0_NumberofOverFlows_toggle)
 16e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Timer0_OverFlow_Car_Toggle>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	30 f0       	brcs	.+12     	; 0x182 <app_start+0x96>
					{
						LED_toggle(CAR_Y_Pin,CAR_PORT);	//Toggle Car Yellow lED.
 176:	61 e4       	ldi	r22, 0x41	; 65
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 8a 01 	call	0x314	; 0x314 <LED_toggle>
						Timer0_OverFlow_Car_Toggle =0 ;
 17e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Timer0_OverFlow_Car_Toggle>
					}
					LED_OFF(CAR_R_Pin, CAR_PORT);
 182:	61 e4       	ldi	r22, 0x41	; 65
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					break;
 18a:	02 c0       	rjmp	.+4      	; 0x190 <app_start+0xa4>
			
				case Car_LED_Repeat:
					CAR_Mode=CAR_GREEN;					//Repeat Car Mode.
 18c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <CAR_Mode>
					break;
			}
				
		switch(PED_Mode)
 190:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <PED_Mode>
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	61 f1       	breq	.+88     	; 0x1f0 <app_start+0x104>
 198:	28 f4       	brcc	.+10     	; 0x1a4 <app_start+0xb8>
 19a:	88 23       	and	r24, r24
 19c:	49 f0       	breq	.+18     	; 0x1b0 <app_start+0xc4>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	a1 f0       	breq	.+40     	; 0x1ca <app_start+0xde>
 1a2:	a4 cf       	rjmp	.-184    	; 0xec <app_start>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	89 f1       	breq	.+98     	; 0x20a <app_start+0x11e>
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	09 f4       	brne	.+2      	; 0x1ae <app_start+0xc2>
 1ac:	42 c0       	rjmp	.+132    	; 0x232 <app_start+0x146>
 1ae:	9e cf       	rjmp	.-196    	; 0xec <app_start>
			{//Pedestrian Mode Sequence Red -> Yellow-Green -> Green -> Yellow-Red and Repeat.
				case PED_RED:
					LED_OFF(PED_G_Pin,PED_PORT);	
 1b0:	62 e4       	ldi	r22, 0x42	; 66
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_OFF(PED_Y_Pin,PED_PORT);
 1b8:	62 e4       	ldi	r22, 0x42	; 66
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_ON (PED_R_Pin,PED_PORT);		//Turn On Pedestrian RED led.
 1c0:	62 e4       	ldi	r22, 0x42	; 66
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	0e 94 82 01 	call	0x304	; 0x304 <LED_ON>
					break;
 1c8:	91 cf       	rjmp	.-222    	; 0xec <app_start>
					
				case PED_YELLOW_Green:
					LED_OFF(PED_G_Pin,PED_PORT);
 1ca:	62 e4       	ldi	r22, 0x42	; 66
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					if (Timer0_OverFlow_PED_Toggle > Timer0_NumberofOverFlows_toggle)
 1d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	30 f0       	brcs	.+12     	; 0x1e6 <app_start+0xfa>
					{
						LED_toggle(PED_Y_Pin,PED_PORT);	//Toggle Pedestrian Yellow lED.
 1da:	62 e4       	ldi	r22, 0x42	; 66
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8a 01 	call	0x314	; 0x314 <LED_toggle>
						Timer0_OverFlow_PED_Toggle =0 ;
 1e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					}
					LED_OFF(PED_R_Pin,PED_PORT);
 1e6:	62 e4       	ldi	r22, 0x42	; 66
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					break;
 1ee:	7e cf       	rjmp	.-260    	; 0xec <app_start>
					
				case PED_GREEN:
					LED_ON (PED_G_Pin,PED_PORT); 		// Turn On Pedestrian Green led.
 1f0:	62 e4       	ldi	r22, 0x42	; 66
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 82 01 	call	0x304	; 0x304 <LED_ON>
					LED_OFF(PED_Y_Pin,PED_PORT);
 1f8:	62 e4       	ldi	r22, 0x42	; 66
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_OFF(PED_R_Pin,PED_PORT);
 200:	62 e4       	ldi	r22, 0x42	; 66
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
				break;
 208:	71 cf       	rjmp	.-286    	; 0xec <app_start>
					
				case PED_YELLOW_RED:
					LED_OFF(PED_G_Pin,PED_PORT);
 20a:	62 e4       	ldi	r22, 0x42	; 66
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					LED_OFF(PED_R_Pin,PED_PORT);
 212:	62 e4       	ldi	r22, 0x42	; 66
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 86 01 	call	0x30c	; 0x30c <LED_OFF>
					if (Timer0_OverFlow_PED_Toggle > Timer0_NumberofOverFlows_toggle)
 21a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	08 f4       	brcc	.+2      	; 0x224 <app_start+0x138>
 222:	64 cf       	rjmp	.-312    	; 0xec <app_start>
					{
						LED_toggle(PED_Y_Pin,PED_PORT);	//Toggle Pedestrian Yellow lED.
 224:	62 e4       	ldi	r22, 0x42	; 66
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 8a 01 	call	0x314	; 0x314 <LED_toggle>
						Timer0_OverFlow_PED_Toggle =0 ;
 22c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 230:	5d cf       	rjmp	.-326    	; 0xec <app_start>
					}
					break;
					
				case PED_LED_Repeat:
					PED_Mode=PED_RED;					//Repeat Pedestrian Mode.
 232:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <PED_Mode>
					break;
 236:	5a cf       	rjmp	.-332    	; 0xec <app_start>

00000238 <__vector_11>:
			}			
	}
}

ISR(TIMER0_OVF)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
	//increment the 5 sec counter.
	Timer0_OverFlow_5sec++;
 246:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Timer0_OverFlow_5sec>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Timer0_OverFlow_5sec>
	
	if (Timer0_OverFlow_5sec < Timer0_NumberofOverFlows)
 250:	83 31       	cpi	r24, 0x13	; 19
 252:	80 f4       	brcc	.+32     	; 0x274 <__vector_11+0x3c>
		{	//if the 5 sec counter is less than the total number of over flow and Yellow LEDs was ON, Then increment the toggle Counter.
			if (CAR_Mode==CAR_YELLOW_RED || CAR_Mode==CAR_YELLOW_Green)
 254:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <CAR_Mode>
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	11 f0       	breq	.+4      	; 0x260 <__vector_11+0x28>
 25c:	93 30       	cpi	r25, 0x03	; 3
 25e:	51 f4       	brne	.+20     	; 0x274 <__vector_11+0x3c>
				{//increment both Yellow toggle counters.
					Timer0_OverFlow_Car_Toggle++;	
 260:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Timer0_OverFlow_Car_Toggle>
 264:	9f 5f       	subi	r25, 0xFF	; 255
 266:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Timer0_OverFlow_Car_Toggle>
					Timer0_OverFlow_PED_Toggle++;
 26a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26e:	9f 5f       	subi	r25, 0xFF	; 255
 270:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
				}
		}
	
	if (Timer0_OverFlow_5sec >= Timer0_NumberofOverFlows)
 274:	83 31       	cpi	r24, 0x13	; 19
 276:	80 f0       	brcs	.+32     	; 0x298 <__vector_11+0x60>
		{	//Check if the 5 sec counter is bigger than or equal the total number of over flow, Then go to next Case.
			CAR_Mode++;
 278:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CAR_Mode>
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CAR_Mode>
			PED_Mode++;
 282:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <PED_Mode>
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PED_Mode>
			//clear all the Counters.
			Timer0_OverFlow_5sec = 0;
 28c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Timer0_OverFlow_5sec>
			Timer0_OverFlow_Car_Toggle = 0;
 290:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Timer0_OverFlow_Car_Toggle>
			Timer0_OverFlow_PED_Toggle = 0;
 294:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
}
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_1>:




ISR(EXT_INT_0)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	8f 93       	push	r24
	//if external interrupt detected a falling edge,Then the upcoming function will take place.
		if (CAR_Mode==CAR_GREEN || CAR_Mode==CAR_YELLOW_Green)
 2b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CAR_Mode>
 2b6:	88 23       	and	r24, r24
 2b8:	11 f0       	breq	.+4      	; 0x2be <__vector_1+0x18>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <__vector_1+0x2e>
		{//if Car Mode = Green or Yellow->Green then both of Yellow LEDs with Toggle For 5 Sec then Car Mode=Red & PED Mode=Green.
			CAR_Mode=CAR_YELLOW_RED;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CAR_Mode>
			PED_Mode=PED_YELLOW_Green;
 2c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PED_Mode>
			//Clear all Counters.
			Timer0_OverFlow_5sec =0;
 2c8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Timer0_OverFlow_5sec>
			Timer0_OverFlow_Car_Toggle =0;
 2cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Timer0_OverFlow_Car_Toggle>
			Timer0_OverFlow_PED_Toggle =0;
 2d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}	
		if (CAR_Mode==CAR_RED)
 2d4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <CAR_Mode>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	51 f4       	brne	.+20     	; 0x2f0 <__vector_1+0x4a>
		{//if Car Mode = Red then the count will start all over again.
			CAR_Mode=CAR_RED;
 2dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <CAR_Mode>
			PED_Mode=PED_GREEN;
 2e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PED_Mode>
			//Clear all Counters.
			Timer0_OverFlow_5sec =0;
 2e4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Timer0_OverFlow_5sec>
			Timer0_OverFlow_Car_Toggle =0;
 2e8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Timer0_OverFlow_Car_Toggle>
			Timer0_OverFlow_PED_Toggle =0;
 2ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		if (CAR_Mode==CAR_YELLOW_RED)
		{
			//if Car Mode = YELLOW->RED, then do nothing.
		}
}
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <BUTTON_init>:
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	0e 94 92 01 	call	0x324	; 0x324 <DIO_init>
 302:	08 95       	ret

00000304 <LED_ON>:
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 34 02 	call	0x468	; 0x468 <DIO_Write>
 30a:	08 95       	ret

0000030c <LED_OFF>:
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	0e 94 34 02 	call	0x468	; 0x468 <DIO_Write>
 312:	08 95       	ret

00000314 <LED_toggle>:
 314:	0e 94 d6 02 	call	0x5ac	; 0x5ac <DIO_toggle>
 318:	08 95       	ret

0000031a <main>:

#include "Application/app.h"

int main ()
{
	app_init();
 31a:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
	
	while(1)
	{
		app_start();
 31e:	0e 94 76 00 	call	0xec	; 0xec <app_start>
 322:	fd cf       	rjmp	.-6      	; 0x31e <main+0x4>

00000324 <DIO_init>:
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_init+0x6>
 328:	93 c0       	rjmp	.+294    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 32a:	62 34       	cpi	r22, 0x42	; 66
 32c:	69 f1       	breq	.+90     	; 0x388 <DIO_init+0x64>
 32e:	18 f4       	brcc	.+6      	; 0x336 <DIO_init+0x12>
 330:	61 34       	cpi	r22, 0x41	; 65
 332:	41 f0       	breq	.+16     	; 0x344 <DIO_init+0x20>
 334:	8f c0       	rjmp	.+286    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 336:	63 34       	cpi	r22, 0x43	; 67
 338:	09 f4       	brne	.+2      	; 0x33c <DIO_init+0x18>
 33a:	48 c0       	rjmp	.+144    	; 0x3cc <DIO_init+0xa8>
 33c:	64 34       	cpi	r22, 0x44	; 68
 33e:	09 f4       	brne	.+2      	; 0x342 <DIO_init+0x1e>
 340:	66 c0       	rjmp	.+204    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 342:	88 c0       	rjmp	.+272    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 344:	41 11       	cpse	r20, r1
 346:	0f c0       	rjmp	.+30     	; 0x366 <DIO_init+0x42>
 348:	4a b3       	in	r20, 0x1a	; 26
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_init+0x32>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_init+0x2e>
 35a:	cb 01       	movw	r24, r22
 35c:	80 95       	com	r24
 35e:	84 23       	and	r24, r20
 360:	8a bb       	out	0x1a, r24	; 26
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	09 f0       	breq	.+2      	; 0x36c <DIO_init+0x48>
 36a:	76 c0       	rjmp	.+236    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 36c:	4a b3       	in	r20, 0x1a	; 26
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_init+0x56>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_init+0x52>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	8a bb       	out	0x1a, r24	; 26
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	41 11       	cpse	r20, r1
 38a:	0f c0       	rjmp	.+30     	; 0x3aa <DIO_init+0x86>
 38c:	47 b3       	in	r20, 0x17	; 23
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	b9 01       	movw	r22, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_init+0x76>
 396:	66 0f       	add	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_init+0x72>
 39e:	cb 01       	movw	r24, r22
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	87 bb       	out	0x17, r24	; 23
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
 3aa:	41 30       	cpi	r20, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <DIO_init+0x8c>
 3ae:	56 c0       	rjmp	.+172    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3b0:	47 b3       	in	r20, 0x17	; 23
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_init+0x9a>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	8a 95       	dec	r24
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_init+0x96>
 3c2:	cb 01       	movw	r24, r22
 3c4:	84 2b       	or	r24, r20
 3c6:	87 bb       	out	0x17, r24	; 23
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
 3cc:	41 11       	cpse	r20, r1
 3ce:	0f c0       	rjmp	.+30     	; 0x3ee <DIO_init+0xca>
 3d0:	44 b3       	in	r20, 0x14	; 20
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_init+0xba>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_init+0xb6>
 3e2:	cb 01       	movw	r24, r22
 3e4:	80 95       	com	r24
 3e6:	84 23       	and	r24, r20
 3e8:	84 bb       	out	0x14, r24	; 20
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
 3ee:	41 30       	cpi	r20, 0x01	; 1
 3f0:	b9 f5       	brne	.+110    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 3f2:	44 b3       	in	r20, 0x14	; 20
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_init+0xd8>
 404:	cb 01       	movw	r24, r22
 406:	84 2b       	or	r24, r20
 408:	84 bb       	out	0x14, r24	; 20
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
 40e:	41 11       	cpse	r20, r1
 410:	0f c0       	rjmp	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 412:	41 b3       	in	r20, 0x11	; 17
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	8a 95       	dec	r24
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	cb 01       	movw	r24, r22
 426:	80 95       	com	r24
 428:	84 23       	and	r24, r20
 42a:	81 bb       	out	0x11, r24	; 17
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
 430:	41 30       	cpi	r20, 0x01	; 1
 432:	c1 f4       	brne	.+48     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 434:	41 b3       	in	r20, 0x11	; 17
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	81 bb       	out	0x11, r24	; 17
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	08 95       	ret
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	08 95       	ret
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	08 95       	ret
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	08 95       	ret
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	08 95       	ret

00000468 <DIO_Write>:
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	08 f0       	brcs	.+2      	; 0x46e <DIO_Write+0x6>
 46c:	93 c0       	rjmp	.+294    	; 0x594 <DIO_Write+0x12c>
 46e:	62 34       	cpi	r22, 0x42	; 66
 470:	69 f1       	breq	.+90     	; 0x4cc <DIO_Write+0x64>
 472:	18 f4       	brcc	.+6      	; 0x47a <DIO_Write+0x12>
 474:	61 34       	cpi	r22, 0x41	; 65
 476:	41 f0       	breq	.+16     	; 0x488 <DIO_Write+0x20>
 478:	8f c0       	rjmp	.+286    	; 0x598 <DIO_Write+0x130>
 47a:	63 34       	cpi	r22, 0x43	; 67
 47c:	09 f4       	brne	.+2      	; 0x480 <DIO_Write+0x18>
 47e:	48 c0       	rjmp	.+144    	; 0x510 <DIO_Write+0xa8>
 480:	64 34       	cpi	r22, 0x44	; 68
 482:	09 f4       	brne	.+2      	; 0x486 <DIO_Write+0x1e>
 484:	66 c0       	rjmp	.+204    	; 0x552 <DIO_Write+0xea>
 486:	88 c0       	rjmp	.+272    	; 0x598 <DIO_Write+0x130>
 488:	41 11       	cpse	r20, r1
 48a:	0f c0       	rjmp	.+30     	; 0x4aa <DIO_Write+0x42>
 48c:	4b b3       	in	r20, 0x1b	; 27
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	b9 01       	movw	r22, r18
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_Write+0x32>
 496:	66 0f       	add	r22, r22
 498:	77 1f       	adc	r23, r23
 49a:	8a 95       	dec	r24
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_Write+0x2e>
 49e:	cb 01       	movw	r24, r22
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8b bb       	out	0x1b, r24	; 27
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
 4aa:	41 30       	cpi	r20, 0x01	; 1
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <DIO_Write+0x48>
 4ae:	76 c0       	rjmp	.+236    	; 0x59c <DIO_Write+0x134>
 4b0:	4b b3       	in	r20, 0x1b	; 27
 4b2:	21 e0       	ldi	r18, 0x01	; 1
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	b9 01       	movw	r22, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_Write+0x56>
 4ba:	66 0f       	add	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	8a 95       	dec	r24
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_Write+0x52>
 4c2:	cb 01       	movw	r24, r22
 4c4:	84 2b       	or	r24, r20
 4c6:	8b bb       	out	0x1b, r24	; 27
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
 4cc:	41 11       	cpse	r20, r1
 4ce:	0f c0       	rjmp	.+30     	; 0x4ee <DIO_Write+0x86>
 4d0:	48 b3       	in	r20, 0x18	; 24
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	b9 01       	movw	r22, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_Write+0x76>
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	8a 95       	dec	r24
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_Write+0x72>
 4e2:	cb 01       	movw	r24, r22
 4e4:	80 95       	com	r24
 4e6:	84 23       	and	r24, r20
 4e8:	88 bb       	out	0x18, r24	; 24
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <DIO_Write+0x8c>
 4f2:	56 c0       	rjmp	.+172    	; 0x5a0 <DIO_Write+0x138>
 4f4:	48 b3       	in	r20, 0x18	; 24
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_Write+0x9a>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_Write+0x96>
 506:	cb 01       	movw	r24, r22
 508:	84 2b       	or	r24, r20
 50a:	88 bb       	out	0x18, r24	; 24
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
 510:	41 11       	cpse	r20, r1
 512:	0f c0       	rjmp	.+30     	; 0x532 <DIO_Write+0xca>
 514:	45 b3       	in	r20, 0x15	; 21
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	b9 01       	movw	r22, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_Write+0xba>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_Write+0xb6>
 526:	cb 01       	movw	r24, r22
 528:	80 95       	com	r24
 52a:	84 23       	and	r24, r20
 52c:	85 bb       	out	0x15, r24	; 21
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	41 30       	cpi	r20, 0x01	; 1
 534:	b9 f5       	brne	.+110    	; 0x5a4 <DIO_Write+0x13c>
 536:	45 b3       	in	r20, 0x15	; 21
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	b9 01       	movw	r22, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_Write+0xdc>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_Write+0xd8>
 548:	cb 01       	movw	r24, r22
 54a:	84 2b       	or	r24, r20
 54c:	85 bb       	out	0x15, r24	; 21
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	08 95       	ret
 552:	41 11       	cpse	r20, r1
 554:	0f c0       	rjmp	.+30     	; 0x574 <DIO_Write+0x10c>
 556:	42 b3       	in	r20, 0x12	; 18
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	b9 01       	movw	r22, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_Write+0xfc>
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_Write+0xf8>
 568:	cb 01       	movw	r24, r22
 56a:	80 95       	com	r24
 56c:	84 23       	and	r24, r20
 56e:	82 bb       	out	0x12, r24	; 18
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	08 95       	ret
 574:	41 30       	cpi	r20, 0x01	; 1
 576:	c1 f4       	brne	.+48     	; 0x5a8 <DIO_Write+0x140>
 578:	42 b3       	in	r20, 0x12	; 18
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	b9 01       	movw	r22, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_Write+0x11e>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_Write+0x11a>
 58a:	cb 01       	movw	r24, r22
 58c:	84 2b       	or	r24, r20
 58e:	82 bb       	out	0x12, r24	; 18
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	08 95       	ret
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	08 95       	ret
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	08 95       	ret
 5a4:	84 e0       	ldi	r24, 0x04	; 4
 5a6:	08 95       	ret
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	08 95       	ret

000005ac <DIO_toggle>:
 5ac:	88 30       	cpi	r24, 0x08	; 8
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <DIO_toggle+0x6>
 5b0:	43 c0       	rjmp	.+134    	; 0x638 <DIO_toggle+0x8c>
 5b2:	62 34       	cpi	r22, 0x42	; 66
 5b4:	b9 f0       	breq	.+46     	; 0x5e4 <DIO_toggle+0x38>
 5b6:	18 f4       	brcc	.+6      	; 0x5be <DIO_toggle+0x12>
 5b8:	61 34       	cpi	r22, 0x41	; 65
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <DIO_toggle+0x1c>
 5bc:	3f c0       	rjmp	.+126    	; 0x63c <DIO_toggle+0x90>
 5be:	63 34       	cpi	r22, 0x43	; 67
 5c0:	f9 f0       	breq	.+62     	; 0x600 <DIO_toggle+0x54>
 5c2:	64 34       	cpi	r22, 0x44	; 68
 5c4:	59 f1       	breq	.+86     	; 0x61c <DIO_toggle+0x70>
 5c6:	3a c0       	rjmp	.+116    	; 0x63c <DIO_toggle+0x90>
 5c8:	4b b3       	in	r20, 0x1b	; 27
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_toggle+0x2a>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_toggle+0x26>
 5da:	cb 01       	movw	r24, r22
 5dc:	84 27       	eor	r24, r20
 5de:	8b bb       	out	0x1b, r24	; 27
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret
 5e4:	48 b3       	in	r20, 0x18	; 24
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	b9 01       	movw	r22, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_toggle+0x46>
 5ee:	66 0f       	add	r22, r22
 5f0:	77 1f       	adc	r23, r23
 5f2:	8a 95       	dec	r24
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_toggle+0x42>
 5f6:	cb 01       	movw	r24, r22
 5f8:	84 27       	eor	r24, r20
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	08 95       	ret
 600:	45 b3       	in	r20, 0x15	; 21
 602:	21 e0       	ldi	r18, 0x01	; 1
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	b9 01       	movw	r22, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_toggle+0x62>
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_toggle+0x5e>
 612:	cb 01       	movw	r24, r22
 614:	84 27       	eor	r24, r20
 616:	85 bb       	out	0x15, r24	; 21
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	08 95       	ret
 61c:	42 b3       	in	r20, 0x12	; 18
 61e:	21 e0       	ldi	r18, 0x01	; 1
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	b9 01       	movw	r22, r18
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_toggle+0x7e>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	8a 95       	dec	r24
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_toggle+0x7a>
 62e:	cb 01       	movw	r24, r22
 630:	84 27       	eor	r24, r20
 632:	82 bb       	out	0x12, r24	; 18
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	08 95       	ret
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	08 95       	ret
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	08 95       	ret

00000640 <Timer0_init>:
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	69 f0       	breq	.+26     	; 0x65e <Timer0_init+0x1e>
 644:	28 f0       	brcs	.+10     	; 0x650 <Timer0_init+0x10>
 646:	82 30       	cpi	r24, 0x02	; 2
 648:	89 f0       	breq	.+34     	; 0x66c <Timer0_init+0x2c>
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	b1 f0       	breq	.+44     	; 0x67a <Timer0_init+0x3a>
 64e:	1e c0       	rjmp	.+60     	; 0x68c <Timer0_init+0x4c>
 650:	83 b7       	in	r24, 0x33	; 51
 652:	8f 7b       	andi	r24, 0xBF	; 191
 654:	83 bf       	out	0x33, r24	; 51
 656:	83 b7       	in	r24, 0x33	; 51
 658:	87 7f       	andi	r24, 0xF7	; 247
 65a:	83 bf       	out	0x33, r24	; 51
 65c:	14 c0       	rjmp	.+40     	; 0x686 <Timer0_init+0x46>
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	80 64       	ori	r24, 0x40	; 64
 662:	83 bf       	out	0x33, r24	; 51
 664:	83 b7       	in	r24, 0x33	; 51
 666:	87 7f       	andi	r24, 0xF7	; 247
 668:	83 bf       	out	0x33, r24	; 51
 66a:	0d c0       	rjmp	.+26     	; 0x686 <Timer0_init+0x46>
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	8f 7b       	andi	r24, 0xBF	; 191
 670:	83 bf       	out	0x33, r24	; 51
 672:	83 b7       	in	r24, 0x33	; 51
 674:	88 60       	ori	r24, 0x08	; 8
 676:	83 bf       	out	0x33, r24	; 51
 678:	06 c0       	rjmp	.+12     	; 0x686 <Timer0_init+0x46>
 67a:	83 b7       	in	r24, 0x33	; 51
 67c:	80 64       	ori	r24, 0x40	; 64
 67e:	83 bf       	out	0x33, r24	; 51
 680:	83 b7       	in	r24, 0x33	; 51
 682:	88 60       	ori	r24, 0x08	; 8
 684:	83 bf       	out	0x33, r24	; 51
 686:	62 bf       	out	0x32, r22	; 50
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	08 95       	ret

00000690 <Timer0_start>:
 690:	82 30       	cpi	r24, 0x02	; 2
 692:	09 f1       	breq	.+66     	; 0x6d6 <Timer0_start+0x46>
 694:	28 f4       	brcc	.+10     	; 0x6a0 <Timer0_start+0x10>
 696:	88 23       	and	r24, r24
 698:	41 f0       	breq	.+16     	; 0x6aa <Timer0_start+0x1a>
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	89 f0       	breq	.+34     	; 0x6c0 <Timer0_start+0x30>
 69e:	3c c0       	rjmp	.+120    	; 0x718 <Timer0_start+0x88>
 6a0:	83 30       	cpi	r24, 0x03	; 3
 6a2:	21 f1       	breq	.+72     	; 0x6ec <Timer0_start+0x5c>
 6a4:	84 30       	cpi	r24, 0x04	; 4
 6a6:	69 f1       	breq	.+90     	; 0x702 <Timer0_start+0x72>
 6a8:	37 c0       	rjmp	.+110    	; 0x718 <Timer0_start+0x88>
 6aa:	83 b7       	in	r24, 0x33	; 51
 6ac:	81 60       	ori	r24, 0x01	; 1
 6ae:	83 bf       	out	0x33, r24	; 51
 6b0:	83 b7       	in	r24, 0x33	; 51
 6b2:	8d 7f       	andi	r24, 0xFD	; 253
 6b4:	83 bf       	out	0x33, r24	; 51
 6b6:	83 b7       	in	r24, 0x33	; 51
 6b8:	8b 7f       	andi	r24, 0xFB	; 251
 6ba:	83 bf       	out	0x33, r24	; 51
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
 6c0:	83 b7       	in	r24, 0x33	; 51
 6c2:	8e 7f       	andi	r24, 0xFE	; 254
 6c4:	83 bf       	out	0x33, r24	; 51
 6c6:	83 b7       	in	r24, 0x33	; 51
 6c8:	82 60       	ori	r24, 0x02	; 2
 6ca:	83 bf       	out	0x33, r24	; 51
 6cc:	83 b7       	in	r24, 0x33	; 51
 6ce:	8b 7f       	andi	r24, 0xFB	; 251
 6d0:	83 bf       	out	0x33, r24	; 51
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	83 bf       	out	0x33, r24	; 51
 6dc:	83 b7       	in	r24, 0x33	; 51
 6de:	82 60       	ori	r24, 0x02	; 2
 6e0:	83 bf       	out	0x33, r24	; 51
 6e2:	83 b7       	in	r24, 0x33	; 51
 6e4:	8b 7f       	andi	r24, 0xFB	; 251
 6e6:	83 bf       	out	0x33, r24	; 51
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	08 95       	ret
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	8e 7f       	andi	r24, 0xFE	; 254
 6f0:	83 bf       	out	0x33, r24	; 51
 6f2:	83 b7       	in	r24, 0x33	; 51
 6f4:	8d 7f       	andi	r24, 0xFD	; 253
 6f6:	83 bf       	out	0x33, r24	; 51
 6f8:	83 b7       	in	r24, 0x33	; 51
 6fa:	84 60       	ori	r24, 0x04	; 4
 6fc:	83 bf       	out	0x33, r24	; 51
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 95       	ret
 702:	83 b7       	in	r24, 0x33	; 51
 704:	81 60       	ori	r24, 0x01	; 1
 706:	83 bf       	out	0x33, r24	; 51
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	8d 7f       	andi	r24, 0xFD	; 253
 70c:	83 bf       	out	0x33, r24	; 51
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	84 60       	ori	r24, 0x04	; 4
 712:	83 bf       	out	0x33, r24	; 51
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
